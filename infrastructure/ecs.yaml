---
Description: >
    This template deploys an ECS cluster to the provided VPC and subnets
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType:
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: m4.large

    ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 3

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    CoreSecurityGroup:
        Description: Common Security Group to use for all EC2
        Type: String

Mappings:

    # These are the latest ECS optimized AMIs as of Feb 2018:
    #
    #   amzn-ami-2017.09.h-amazon-ecs-optimized
    #   ECS agent:    1.17.1
    #   Docker:       17.09.1-ce
    #   ecs-init:     1.17.1-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific)

    AWSRegionToAMI:
        us-east-2:
            AMI: ami-0329a1fdc914b0c55
        us-east-1:
            AMI: ami-02507631a9f7bc956
        us-west-2:
            AMI: ami-00e0090ac21971297
        us-west-1:
            AMI: ami-0e7f661f69bb5d6b4
        eu-west-3:
            AMI: ami-071f4e4006f9c3211
        eu-west-2:
            AMI: ami-013b322dbc79e9a6a
        eu-west-1:
            AMI: ami-04a084a6d17d9816e
        eu-central-1:
            AMI: ami-09577c19fbe1bd7fa
        ap-northeast-2:
            AMI: ami-0400d18ee6d078a95


Conditions:
    IsProduction: !Equals [ !Ref EnvironmentName, "prod" ]


Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: 1
            MaxSize: !If [IsProduction, 12, 12]
            DesiredCapacity: !Ref ClusterSize
            HealthCheckGracePeriod: 300
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} ECS host
                  PropagateAtLaunch: true
                - Key: project
                  Value: !Ref EnvironmentName
                  PropagateAtLaunch: true
                - Key: ansible_group
                  Value: ecs
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal:
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                SuspendProcesses:
                  - AlarmNotification
                  - ScheduledActions
                WaitOnResourceSignals: true

    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            KeyName: "admin-primary"
            SecurityGroups:
                - !Ref SecurityGroup
                - !Ref CoreSecurityGroup
            IamInstanceProfile: !Ref ECSInstanceProfile
            UserData:
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    cloud-init-per once yum_update yum update -y
                    cloud-init-per once install_nfs_utils yum install -y nfs-utils
                    echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
                    yum install -y aws-cfn-bootstrap
                    yum install -y python-pip
                    /bin/pip install ansible==2.9.0
                    yum install -y git
                    /bin/ansible-pull -U https://gitlab.solvestack.com/solvestack-devops/ansible-pull.git -i hosts --extra-vars "ansible_environment=${EnvironmentName}" || :
                    /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken",
                                "ssm:DescribeAssociation",
                                "ssm:GetDeployablePatchSnapshotForInstance",
                                "ssm:GetDocument",
                                "ssm:GetManifest",
                                "ssm:GetParameters",
                                "ssm:ListAssociations",
                                "ssm:ListInstanceAssociations",
                                "ssm:PutInventory",
                                "ssm:PutComplianceItems",
                                "ssm:PutConfigurePackageResult",
                                "ssm:UpdateAssociationStatus",
                                "ssm:UpdateInstanceAssociationStatus",
                                "ssm:UpdateInstanceInformation",
                                "ec2messages:AcknowledgeMessage",
                                "ec2messages:DeleteMessage",
                                "ec2messages:FailMessage",
                                "ec2messages:GetEndpoint",
                                "ec2messages:GetMessages",
                                "ec2messages:SendReply",
                                "cloudwatch:PutMetricData",
                                "ec2:DescribeInstanceStatus",
                                "ds:CreateComputer",
                                "ds:DescribeDirectories",
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams",
                                "logs:PutLogEvents",
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:AbortMultipartUpload",
                                "s3:ListMultipartUploadParts",
                                "s3:ListBucket",
                                "s3:ListBucketMultipartUploads",
                                "ec2:DescribeAvailabilityZones",
                                "ec2:DescribeNetworkInterfaceAttribute",
                                "ec2:DescribeNetworkInterfaces",
                                "ec2:DescribeSecurityGroups",
                                "ec2:DescribeSubnets",
                                "ec2:DescribeVpcAttribute",
                                "ec2:DescribeVpcs",
                                "elasticfilesystem:Describe*",
                                "kms:ListAliases"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref ECSRole

    ECSServiceAutoScalingRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    Action:
                    - 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                        Service:
                        - application-autoscaling.amazonaws.com
            Path: /
            Policies:
            - PolicyName: ecs-service-autoscaling
              PolicyDocument:
                  Statement:
                      Effect: Allow
                      Action:
                      - application-autoscaling:*
                      - cloudwatch:DescribeAlarms
                      - cloudwatch:PutMetricAlarm
                      - ecs:DescribeServices
                      - ecs:UpdateService
                      Resource: "*"

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster

    ECSServiceAutoScalingRole:
        Description: A reference to ECS service auto scaling role
        Value: !GetAtt ECSServiceAutoScalingRole.Arn

    ECSAutoScalingGroupName:
        Description: A reference to ECS AutoScaling Group Name
        Value: !Ref ECSAutoScalingGroup

Description: >
    This is an example of a long running ECS service that needs to connect to another ECS service (product-service)
    via it's load balancer. We use environment variables to pass the URL of the product-service to this one's container(s).


Parameters:

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id
    ServiceName:
        Description: The name of this service
        Type: String
    EnvironmentName:
        Description: Name of the environment we are on
        Type: String
    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    MaxCount:
        Description: Maximum number of instances of this task we can run across our cluster
        Type: Number
        Default: 3

    ContainerImageTag:
        Description: Tag to ID container images
        Type: String
        Default: master

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    AdminHttpsListener:
        Description: The https load balancer listener
        Type: String

    Path:
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /

    ECSServiceAutoScalingRoleARN:
        Description: The ECS service auto scaling role ARN
        Type: String
    Priority:
        Description: priority for the lb listener rules
        Type: String
    ForceUpgrade:
        Description: Use this to force a new pull of this service
        Type: String

    ServiceRole:
      Type: String
      Description: Service role from the API service.

    CentralLoggingURL:
      Type: String
      Default: None


Conditions:
    NoCentralLogging: !Equals [ !Ref CentralLoggingURL, None ]
    UseCentralLogging: !Not [Condition: NoCentralLogging]

Resources:

    Service:
        Type: AWS::ECS::Service
        DependsOn: HttpsListenerRule
        Properties:
            ServiceName: !Sub ${ServiceName}
            Cluster: !Ref Cluster
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 100
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !If [UseCentralLogging, !Ref TaskDefinition1, !Ref TaskDefinition2]
            LoadBalancers:
                - ContainerName: solvestack-frontend
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroup2

    TaskDefinition1:
        Type: AWS::ECS::TaskDefinition
        Condition: UseCentralLogging
        Properties:
            Family: !Sub solvestack-frontend-app-${EnvironmentName}
            ExecutionRoleArn: !Ref TaskDefinitionRole
            ContainerDefinitions:
                - Name: solvestack-frontend
                  Essential: true
                  Image: !Sub 461537903867.dkr.ecr.us-west-2.amazonaws.com/solvestack-frontend:${ContainerImageTag}
                  MemoryReservation: 256
                  Cpu: 256
                  Environment:
                    - Name: BLACKLIST
                      Value: 0
                    - Name: PORT
                      Value: 80
                    - Name: USE_HTTPS
                      Value: 1
                    - Name: FORCE_UPGRADE
                      Value: !Ref ForceUpgrade
                    - Name: VUE_APP_API_ROOT_URL
                      Value: !Sub https://vue.${EnvironmentName}.solvestack.com
                    - Name: ENVIRONMENT
                      Value: !Ref EnvironmentName
                  PortMappings:
                    - ContainerPort: 80
                  LogConfiguration:
                    LogDriver: json-file


    TaskDefinition2:
        Type: AWS::ECS::TaskDefinition
        Condition: NoCentralLogging
        Properties:
            Family: !Sub solvestack-frontend-app-${EnvironmentName}
            ExecutionRoleArn: !Ref TaskDefinitionRole
            ContainerDefinitions:
                - Name: solvestack-frontend
                  Essential: true
                  Image: !Sub 461537903867.dkr.ecr.us-west-2.amazonaws.com/solvestack-frontend:${ContainerImageTag}
                  MemoryReservation: 256
                  Cpu: 256
                  Environment:
                    - Name: BLACKLIST
                      Value: 0
                    - Name: PORT
                      Value: 80
                    - Name: USE_HTTPS
                      Value: 1
                    - Name: FORCE_UPGRADE
                      Value: !Ref ForceUpgrade
                    - Name: VUE_APP_API_ROOT_URL
                      Value: !Sub https://vue.${EnvironmentName}.solvestack.com
                    - Name: ENVIRONMENT
                      Value: !Ref EnvironmentName
                  PortMappings:
                    - ContainerPort: 80
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    TaskDefinitionRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSTaskRole-${AWS::Region}-Vue
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                            "ecs-tasks.amazonaws.com",
                            "ec2.amazonaws.com"
                        ]
                        }
                    }]
                }
            Policies:
                - PolicyName: !Sub ecs-tasksecrets-${EnvironmentName}-vue
                  PolicyDocument: !Sub |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                              "secretsmanager:GetSecretValue",
                              "kms:Decrypt"
                            ],
                            "Resource": [
                              "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:cloudformation/${EnvironmentName}/secrets*",
                              "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/67bfc5b2-3714-41c0-b599-30ef777b3518"
                              ]
                        }]
                    }
                - PolicyName: !Sub ecs-taskecr-${EnvironmentName}-vue
                  PolicyDocument: !Sub |
                    {
                      "Statement": [{
                      "Effect": "Allow",
                      "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken",
                                "cloudwatch:PutMetricData",
                                "ec2:DescribeInstanceStatus",
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams"
                      ],
                      "Resource": "*"
                      }]
                    }
    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    TargetGroup2:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            TargetGroupAttributes:
              - Key: deregistration_delay.timeout_seconds
                Value: '15'
            Tags:
                -
                    Key: 'Project'
                    Value: !Ref EnvironmentName
                -
                    Key: 'Name'
                    Value: 'TargetGroup80'

    HttpsListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref AdminHttpsListener
            Priority: !Ref Priority
            Conditions:
                - Field: host-header
                  Values:
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup2
                  Type: forward

    ServiceScalableTarget:
        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
        Properties:
            MaxCapacity: !Ref MaxCount
            MinCapacity: !Ref DesiredCount
            ResourceId: !Join
                - /
                - - service
                  - !Ref Cluster
                  - !GetAtt Service.Name
            RoleARN: !Ref ECSServiceAutoScalingRoleARN
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    ServiceScaleOutPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: !Sub ServiceScaleOutPolicy${ServiceName}
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 1

    ServiceScaleInPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: !Sub ServiceScaleInPolicy${ServiceName}
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalUpperBound: 0
                  ScalingAdjustment: -1

    CPUScaleOutAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: !Sub CPU utilization greater than 90% ${ServiceName}
            AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster
            - Name: ServiceName
              Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '3'
            Threshold: '90'
            ComparisonOperator: GreaterThanThreshold
            AlarmActions:
            - !Ref ServiceScaleOutPolicy

    CPUScaleInAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: !Sub CPU utilization less than 70% ${ServiceName}
            AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster
            - Name: ServiceName
              Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '10'
            Threshold: '70'
            ComparisonOperator: LessThanThreshold
            AlarmActions:
            - !Ref ServiceScaleInPolicy

Description: >


Parameters:

    ServiceName:
        Description: The name of this service.  This will need to be edited when you create a new service
        Type: String
        Default: svc-solvestack-notifications

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    ServiceRole:
        Description: The service role created for the Services
        Type: String

    MaxCount:
        Description: Maximum number of instances of this task we can run across our cluster
        Type: Number
        Default: 3

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    HttpsListener:
        Description: The HTTPS listener to register with
        Type: String

    Path:
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /

    ECSServiceAutoScalingRoleARN:
        Description: The ECS service auto scaling role ARN
        Type: String

    Priority:
        Description: priority for lb rules
        Type: String

    ForceUpgrade:
        Description: Force this service to upgrade
        Type: String

    ContainerImageTag:
        Description: Tag to ID container images
        Type: String
        Default: master

    AwsAccessKey:
        Type: String

    AwsSecretKey:
        Type: String

    CentralLoggingURL:
      Type: String
      Default: None


Conditions:
    NoCentralLogging: !Equals [ !Ref CentralLoggingURL, None ]
    UseCentralLogging: !Not [Condition: NoCentralLogging]

Resources:

    Service:
        Type: AWS::ECS::Service
        DependsOn: HttpsListenerRule
        Properties:
            # To make service changes, add -${AWS::StackName} and run Cloudformation, then remove and run again.
            ServiceName: !Sub ${ServiceName}
            Cluster: !Ref Cluster
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !If [UseCentralLogging, !Ref TaskDefinition1, !Ref TaskDefinition2]
            LoadBalancers:
                - ContainerName: !Ref ServiceName
                  ContainerPort: 9001
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition1:
        Type: AWS::ECS::TaskDefinition
        Condition: UseCentralLogging
        Properties:
            Family: !Ref ServiceName
            ContainerDefinitions:
                - Name: !Ref ServiceName
                  Essential: true
                  Image: !Sub 461537903867.dkr.ecr.us-west-2.amazonaws.com/svc-solvestack-notifications:${ContainerImageTag}
                  Memory: 128
                  Environment:
                    - Name: AWS_ACCESS_KEY_ID
                      Value: !Ref AwsAccessKey
                    - Name: AWS_SECRET_ACCESS_KEY
                      Value: !Ref AwsSecretKey
                    - Name: FORCE_UPGRADE
                      Value: !Ref ForceUpgrade
                  PortMappings:
                    - ContainerPort: 9001
                  LogConfiguration:
                    LogDriver: json-file

    TaskDefinition2:
        Type: AWS::ECS::TaskDefinition
        Condition: NoCentralLogging
        Properties:
            Family: !Ref ServiceName
            ContainerDefinitions:
                - Name: !Ref ServiceName
                  Essential: true
                  Image: !Sub 461537903867.dkr.ecr.us-west-2.amazonaws.com/svc-solvestack-notifications:${ContainerImageTag}
                  Memory: 128
                  Environment:
                    - Name: AWS_ACCESS_KEY_ID
                      Value: !Ref AwsAccessKey
                    - Name: AWS_SECRET_ACCESS_KEY
                      Value: !Ref AwsSecretKey
                    - Name: FORCE_UPGRADE
                      Value: !Ref ForceUpgrade
                  PortMappings:
                    - ContainerPort: 9001
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 9001
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /service/heartbeat
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2

    # ListenerRule:
    #     Type: AWS::ElasticLoadBalancingV2::ListenerRule
    #     Properties:
    #         ListenerArn: !Ref Listener
    #         Priority: !Ref Priority
    #         Conditions:
    #             - Field: host-header
    #               Values:
    #                 - !Ref Path
    #         Actions:
    #             - TargetGroupArn: !Ref TargetGroup
    #               Type: forward

    HttpsListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref HttpsListener
            Priority: !Ref Priority
            Conditions:
                - Field: host-header
                  Values:
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    ServiceScalableTarget:
        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
        Properties:
            MaxCapacity: !Ref MaxCount
            MinCapacity: !Ref DesiredCount
            ResourceId: !Join
                - /
                - - service
                  - !Ref Cluster
                  - !GetAtt Service.Name
            RoleARN: !Ref ECSServiceAutoScalingRoleARN
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    ServiceScaleOutPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: !Sub ServiceScaleOutPolicy ${ServiceName}
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 1

    ServiceScaleInPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: !Sub ServiceScaleInPolicy ${ServiceName}
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalUpperBound: 0
                  ScalingAdjustment: -1

    CPUScaleOutAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: !Sub CPU utilization greater than 90% ${ServiceName}
            AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster
            - Name: ServiceName
              Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '3'
            Threshold: '90'
            ComparisonOperator: GreaterThanThreshold
            AlarmActions:
            - !Ref ServiceScaleOutPolicy

    CPUScaleInAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: !Sub CPU utilization less than 70% ${ServiceName}
            AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster
            - Name: ServiceName
              Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '10'
            Threshold: '70'
            ComparisonOperator: LessThanThreshold
            AlarmActions:
            - !Ref ServiceScaleInPolicy
